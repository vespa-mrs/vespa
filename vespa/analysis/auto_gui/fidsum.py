# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.0 on Fri Mar 26 10:39:56 2021
#

import wx

# begin wxGlade: dependencies
from wx.lib.agw.floatspin import FloatSpin, EVT_FLOATSPIN, FS_LEFT, FS_RIGHT, FS_CENTRE, FS_READONLY
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PanelPrepFidsumUI(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PanelPrepFidsumUI.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.SizerSplitterWindow = wx.BoxSizer(wx.VERTICAL)

        self.SplitterWindow = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.SplitterWindow.SetMinimumPaneSize(20)
        self.SizerSplitterWindow.Add(self.SplitterWindow, 1, wx.EXPAND, 0)

        self.PanelPrepFidsum = wx.ScrolledWindow(self.SplitterWindow, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.PanelPrepFidsum.SetScrollRate(10, 10)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.PanelCoilCombination = wx.Panel(self.PanelPrepFidsum, wx.ID_ANY, style=wx.BORDER_RAISED)
        sizer_1.Add(self.PanelCoilCombination, 0, wx.ALL | wx.EXPAND, 8)

        sizer_8 = wx.StaticBoxSizer(wx.StaticBox(self.PanelCoilCombination, wx.ID_ANY, "Process Step 1 - Coil Combination"), wx.VERTICAL)

        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8.Add(sizer_12, 0, wx.ALL | wx.EXPAND, 8)

        self.label_7 = wx.StaticText(self.PanelCoilCombination, wx.ID_ANY, "Method : ")
        sizer_12.Add(self.label_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.ComboCoilCombineMethod = wx.ComboBox(self.PanelCoilCombination, wx.ID_ANY, choices=["None", "Siemens (Brown)", "CMRR", "External Dataset"], style=wx.CB_READONLY)
        self.ComboCoilCombineMethod.SetSelection(0)
        sizer_12.Add(self.ComboCoilCombineMethod, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.CheckApplyNoiseWhitening = wx.CheckBox(self.PanelCoilCombination, wx.ID_ANY, "  Apply Noise Whitening : ")
        sizer_12.Add(self.CheckApplyNoiseWhitening, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 16)

        self.PanelCoilCombineExternalDataset = wx.Panel(self.PanelCoilCombination, wx.ID_ANY)
        sizer_8.Add(self.PanelCoilCombineExternalDataset, 0, wx.EXPAND | wx.LEFT, 8)

        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)

        self.ButtonCoilCombineExternalBrowse = wx.Button(self.PanelCoilCombineExternalDataset, wx.ID_ANY, "External Dataset Browse ...")
        sizer_17.Add(self.ButtonCoilCombineExternalBrowse, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)

        self.TextCoilCombineExternalDataset = wx.TextCtrl(self.PanelCoilCombineExternalDataset, wx.ID_ANY, "", style=wx.TE_READONLY)
        sizer_17.Add(self.TextCoilCombineExternalDataset, 1, wx.EXPAND, 0)

        self.PanelDataExclusion = wx.Panel(self.PanelPrepFidsum, wx.ID_ANY, style=wx.BORDER_RAISED)
        sizer_1.Add(self.PanelDataExclusion, 0, wx.ALL | wx.EXPAND, 8)

        sizer_13 = wx.StaticBoxSizer(wx.StaticBox(self.PanelDataExclusion, wx.ID_ANY, "Process Step 2 - FID Exclusion"), wx.VERTICAL)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_13.Add(sizer_6, 0, wx.EXPAND, 0)

        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(sizer_24, 0, wx.ALL | wx.EXPAND, 8)

        label_19 = wx.StaticText(self.PanelDataExclusion, wx.ID_ANY, "Method : ")
        sizer_24.Add(label_19, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.ComboExclusionMethod = wx.ComboBox(self.PanelDataExclusion, wx.ID_ANY, choices=["Manual", "Remove Bad Averages (fid-a)", "Remove N Worst Averages (fid-a)"], style=wx.CB_READONLY)
        self.ComboExclusionMethod.SetSelection(0)
        sizer_24.Add(self.ComboExclusionMethod, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.CheckExclusionInputAdjust = wx.CheckBox(self.PanelDataExclusion, wx.ID_ANY, " Apply Global Ph0, Apodize, Left Shift to Input FIDs")
        sizer_24.Add(self.CheckExclusionInputAdjust, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 12)

        sizer_25 = wx.BoxSizer(wx.VERTICAL)
        sizer_6.Add(sizer_25, 0, wx.EXPAND, 0)

        self.PanelExclusionManualOptions = wx.Panel(self.PanelDataExclusion, wx.ID_ANY)
        sizer_25.Add(self.PanelExclusionManualOptions, 1, wx.ALL | wx.EXPAND, 1)

        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)

        self.ButtonToggleCurrentIndex = wx.Button(self.PanelExclusionManualOptions, wx.ID_ANY, "Toggle Current Index")
        sizer_16.Add(self.ButtonToggleCurrentIndex, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 6)

        label_12 = wx.StaticText(self.PanelExclusionManualOptions, wx.ID_ANY, "You can also Right-Click in the top right plot to toggle exclusions")
        sizer_16.Add(label_12, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 12)

        self.PanelExclusionFidaRmBad = wx.Panel(self.PanelDataExclusion, wx.ID_ANY)
        sizer_25.Add(self.PanelExclusionFidaRmBad, 1, wx.ALL | wx.EXPAND, 2)

        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)

        label_25 = wx.StaticText(self.PanelExclusionFidaRmBad, wx.ID_ANY, "Exclude Threshold [x Stdev] : ")
        sizer_27.Add(label_25, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 6)

        self.FloatExclusionAutoFidaBadThreshold = FloatSpin(self.PanelExclusionFidaRmBad, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatExclusionAutoFidaBadThreshold.SetMinSize((80, -1))
        sizer_27.Add(self.FloatExclusionAutoFidaBadThreshold, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_26 = wx.StaticText(self.PanelExclusionFidaRmBad, wx.ID_ANY, "Domain : ")
        sizer_27.Add(label_26, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 12)

        self.ChoiceExclusionAutoFidaBadDomain = wx.Choice(self.PanelExclusionFidaRmBad, wx.ID_ANY, choices=["Time", "Frequency"])
        self.ChoiceExclusionAutoFidaBadDomain.SetSelection(0)
        sizer_27.Add(self.ChoiceExclusionAutoFidaBadDomain, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)

        self.PanelExclusionFidaWorstN = wx.Panel(self.PanelDataExclusion, wx.ID_ANY)
        self.PanelExclusionFidaWorstN.Hide()
        sizer_25.Add(self.PanelExclusionFidaWorstN, 1, wx.ALL | wx.EXPAND, 2)

        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)

        label_27 = wx.StaticText(self.PanelExclusionFidaWorstN, wx.ID_ANY, "Number of 'worst FIDs' to remove : ")
        sizer_28.Add(label_27, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 6)

        self.SpinExclusionAutoFidaWorstN = wx.SpinCtrl(self.PanelExclusionFidaWorstN, wx.ID_ANY, "0", min=0, max=100)
        sizer_28.Add(self.SpinExclusionAutoFidaWorstN, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_23 = wx.BoxSizer(wx.VERTICAL)
        sizer_13.Add(sizer_23, 1, wx.ALL | wx.EXPAND, 4)

        self.LabelRemainingFidCount = wx.StaticText(self.PanelDataExclusion, wx.ID_ANY, "Indices Excluded from Result    -    FIDs Remaining = 1,  Excluded = 0")
        sizer_23.Add(self.LabelRemainingFidCount, 1, wx.RIGHT, 6)

        self.TextDataExclusion = wx.TextCtrl(self.PanelDataExclusion, wx.ID_ANY, "", style=wx.TE_LEFT | wx.TE_MULTILINE | wx.TE_READONLY)
        sizer_23.Add(self.TextDataExclusion, 0, wx.ALL | wx.EXPAND, 3)

        self.PanelFidCorrection = wx.Panel(self.PanelPrepFidsum, wx.ID_ANY, style=wx.BORDER_RAISED)
        sizer_1.Add(self.PanelFidCorrection, 0, wx.ALL | wx.EXPAND, 8)

        sizer_9 = wx.StaticBoxSizer(wx.StaticBox(self.PanelFidCorrection, wx.ID_ANY, "Process Step 3 - Freq and Phase Correction"), wx.VERTICAL)

        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(sizer_18, 0, wx.ALL | wx.EXPAND, 8)

        self.label_14 = wx.StaticText(self.PanelFidCorrection, wx.ID_ANY, "Method : ")
        sizer_18.Add(self.label_14, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.ComboCorrectionMethod = wx.ComboBox(self.PanelFidCorrection, wx.ID_ANY, choices=["None", "Vespa Correlation", "FID-A Time Domain", "Suspect RATS"], style=wx.CB_READONLY)
        self.ComboCorrectionMethod.SetSelection(1)
        sizer_18.Add(self.ComboCorrectionMethod, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.CheckCorrectionInputAdjust = wx.CheckBox(self.PanelFidCorrection, wx.ID_ANY, " Apply Global Ph0, Apodize, Left Shift to Input FIDs")
        sizer_18.Add(self.CheckCorrectionInputAdjust, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 12)

        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_9.Add(sizer_19, 0, wx.EXPAND | wx.LEFT, 8)

        self.PanelCorrectionsVespa = wx.Panel(self.PanelFidCorrection, wx.ID_ANY)
        self.PanelCorrectionsVespa.Hide()
        sizer_19.Add(self.PanelCorrectionsVespa, 1, wx.EXPAND, 0)

        sizer_20 = wx.BoxSizer(wx.VERTICAL)

        self.panel_1 = wx.Panel(self.PanelCorrectionsVespa, wx.ID_ANY)
        sizer_20.Add(self.panel_1, 1, wx.ALL | wx.EXPAND, 8)

        grid_sizer_7 = wx.FlexGridSizer(3, 4, 4, 4)

        label_8 = wx.StaticText(self.panel_1, wx.ID_ANY, "Ref Peak Search - Center [ppm] : ")
        grid_sizer_7.Add(label_8, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatVespaReferencePeakCenter = FloatSpin(self.panel_1, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatVespaReferencePeakCenter.SetMinSize((80, -1))
        grid_sizer_7.Add(self.FloatVespaReferencePeakCenter, 0, 0, 0)

        label_5 = wx.StaticText(self.panel_1, wx.ID_ANY, "Phase Optimize - Start [ppm] : ")
        grid_sizer_7.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatVespaPhase0RangeStart = FloatSpin(self.panel_1, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatVespaPhase0RangeStart.SetMinSize((80, -1))
        grid_sizer_7.Add(self.FloatVespaPhase0RangeStart, 0, 0, 0)

        label_10 = wx.StaticText(self.panel_1, wx.ID_ANY, "Search - Range [+/- ppm] : ")
        grid_sizer_7.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatVespaPeakSearchWidth = FloatSpin(self.panel_1, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatVespaPeakSearchWidth.SetMinSize((80, -1))
        grid_sizer_7.Add(self.FloatVespaPeakSearchWidth, 0, 0, 0)

        label_6 = wx.StaticText(self.panel_1, wx.ID_ANY, "Phase Optimize - End [ppm] : ")
        grid_sizer_7.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatVespaPhase0RangeEnd = FloatSpin(self.panel_1, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatVespaPhase0RangeEnd.SetMinSize((80, -1))
        grid_sizer_7.Add(self.FloatVespaPhase0RangeEnd, 0, 0, 0)

        grid_sizer_7.Add((20, 20), 0, 0, 0)

        grid_sizer_7.Add((20, 20), 0, 0, 0)

        label_32 = wx.StaticText(self.panel_1, wx.ID_ANY, "Target Spectrum Method : ")
        grid_sizer_7.Add(label_32, 0, wx.ALIGN_RIGHT, 0)

        self.ComboTargetSpectrumVespa = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["Average all", "Avg first 4", "Avg first 10%", "Avg first 25%", "Avg first 50%", "Avg mid 10%", "Avg mid 30%", "User define"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.ComboTargetSpectrumVespa.SetSelection(1)
        grid_sizer_7.Add(self.ComboTargetSpectrumVespa, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.PanelCorrectionsVespaCorrelate = wx.Panel(self.PanelFidCorrection, wx.ID_ANY)
        sizer_19.Add(self.PanelCorrectionsVespaCorrelate, 1, wx.EXPAND, 0)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)

        self.ButtonVespaCorrelatePrior = wx.Button(self.PanelCorrectionsVespaCorrelate, wx.ID_ANY, "Show Dialog for Preprocessing Prior Settings")
        sizer_7.Add(self.ButtonVespaCorrelatePrior, 0, 0, 0)

        self.PanelCorrectionsSuspectSpectralRegistration = wx.Panel(self.PanelFidCorrection, wx.ID_ANY)
        self.PanelCorrectionsSuspectSpectralRegistration.Hide()
        sizer_19.Add(self.PanelCorrectionsSuspectSpectralRegistration, 1, wx.EXPAND, 0)

        sizer_21 = wx.BoxSizer(wx.VERTICAL)

        self.panel_2 = wx.Panel(self.PanelCorrectionsSuspectSpectralRegistration, wx.ID_ANY)
        sizer_21.Add(self.panel_2, 1, wx.ALL | wx.EXPAND, 8)

        grid_sizer_8 = wx.FlexGridSizer(3, 4, 4, 4)

        label_15 = wx.StaticText(self.panel_2, wx.ID_ANY, "Initial Guess - Freq Shift [Hz] : ")
        grid_sizer_8.Add(label_15, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatSuspectInitialGuessFreqShift = FloatSpin(self.panel_2, wx.ID_ANY, value=0.0, digits=3, min_val=-50.0, max_val=50.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatSuspectInitialGuessFreqShift.SetMinSize((80, -1))
        grid_sizer_8.Add(self.FloatSuspectInitialGuessFreqShift, 0, 0, 0)

        label_17 = wx.StaticText(self.panel_2, wx.ID_ANY, "Optimize Range - Start [ppm] : ")
        grid_sizer_8.Add(label_17, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatSuspectOptimizeRangeStart = FloatSpin(self.panel_2, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatSuspectOptimizeRangeStart.SetMinSize((80, -1))
        grid_sizer_8.Add(self.FloatSuspectOptimizeRangeStart, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_16 = wx.StaticText(self.panel_2, wx.ID_ANY, "Initial Guess - Phase [deg] : ")
        grid_sizer_8.Add(label_16, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatSuspectInitialGuessPhase = FloatSpin(self.panel_2, wx.ID_ANY, value=0.0, digits=3, min_val=-180.0, max_val=180.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatSuspectInitialGuessPhase.SetMinSize((80, -1))
        grid_sizer_8.Add(self.FloatSuspectInitialGuessPhase, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_18 = wx.StaticText(self.panel_2, wx.ID_ANY, "Optimize Range - End [ppm] : ")
        grid_sizer_8.Add(label_18, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatSuspectOptimizeRangeEnd = FloatSpin(self.panel_2, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatSuspectOptimizeRangeEnd.SetMinSize((80, -1))
        grid_sizer_8.Add(self.FloatSuspectOptimizeRangeEnd, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_8.Add((20, 20), 0, 0, 0)

        grid_sizer_8.Add((20, 20), 0, 0, 0)

        label_33 = wx.StaticText(self.panel_2, wx.ID_ANY, "Target Spectrum Method : ")
        grid_sizer_8.Add(label_33, 0, wx.ALIGN_RIGHT, 0)

        self.ComboTargetSpectrumSuspectSpectral = wx.ComboBox(self.panel_2, wx.ID_ANY, choices=["Average all", "Avg first 4", "Avg first 10%", "Avg first 25%", "Avg first 50%", "Avg mid 10%", "Avg mid 30%", "User define"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.ComboTargetSpectrumSuspectSpectral.SetSelection(1)
        grid_sizer_8.Add(self.ComboTargetSpectrumSuspectSpectral, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.PanelCorrectionsSuspectRats = wx.Panel(self.PanelFidCorrection, wx.ID_ANY)
        sizer_19.Add(self.PanelCorrectionsSuspectRats, 1, wx.EXPAND, 0)

        sizer_22 = wx.BoxSizer(wx.VERTICAL)

        self.panel_3 = wx.Panel(self.PanelCorrectionsSuspectRats, wx.ID_ANY)
        sizer_22.Add(self.panel_3, 1, wx.ALL | wx.EXPAND, 8)

        grid_sizer_9 = wx.FlexGridSizer(3, 4, 4, 4)

        label_20 = wx.StaticText(self.panel_3, wx.ID_ANY, "Initial Guess - Freq Shift [Hz] : ")
        grid_sizer_9.Add(label_20, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatRatsInitialGuessFreqShift = FloatSpin(self.panel_3, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatRatsInitialGuessFreqShift.SetMinSize((80, -1))
        grid_sizer_9.Add(self.FloatRatsInitialGuessFreqShift, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_22 = wx.StaticText(self.panel_3, wx.ID_ANY, "Optimize Range - Start [ppm] : ")
        grid_sizer_9.Add(label_22, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatRatsOptimizeRangeStart = FloatSpin(self.panel_3, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatRatsOptimizeRangeStart.SetMinSize((80, -1))
        grid_sizer_9.Add(self.FloatRatsOptimizeRangeStart, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_21 = wx.StaticText(self.panel_3, wx.ID_ANY, "Initial Guess - Phase [deg] : ")
        grid_sizer_9.Add(label_21, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatRatsInitialGuessPhase = FloatSpin(self.panel_3, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatRatsInitialGuessPhase.SetMinSize((80, -1))
        grid_sizer_9.Add(self.FloatRatsInitialGuessPhase, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_23 = wx.StaticText(self.panel_3, wx.ID_ANY, "Optimize Range - End [ppm] : ")
        grid_sizer_9.Add(label_23, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatRatsOptimizeRangeEnd = FloatSpin(self.panel_3, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatRatsOptimizeRangeEnd.SetMinSize((80, -1))
        grid_sizer_9.Add(self.FloatRatsOptimizeRangeEnd, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_24 = wx.StaticText(self.panel_3, wx.ID_ANY, "Baseline Order [int] : ")
        label_24.SetMinSize((80, -1))
        grid_sizer_9.Add(label_24, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.SpinRatsBaselineOrder = wx.SpinCtrl(self.panel_3, wx.ID_ANY, "0", min=0, max=100)
        self.SpinRatsBaselineOrder.SetMinSize((80, -1))
        grid_sizer_9.Add(self.SpinRatsBaselineOrder, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)

        label_34 = wx.StaticText(self.panel_3, wx.ID_ANY, "Target Spectrum Method : ")
        grid_sizer_9.Add(label_34, 0, wx.ALIGN_RIGHT, 0)

        self.ComboTargetSpectrumSuspectRats = wx.ComboBox(self.panel_3, wx.ID_ANY, choices=["Average all", "Avg first 4", "Avg first 10%", "Avg first 25%", "Avg first 50%", "Avg mid 10%", "Avg mid 30%", "User define"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.ComboTargetSpectrumSuspectRats.SetSelection(1)
        grid_sizer_9.Add(self.ComboTargetSpectrumSuspectRats, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.PanelCorrectionResultsAndDisplay = wx.Panel(self.PanelPrepFidsum, wx.ID_ANY, style=wx.BORDER_RAISED)
        sizer_1.Add(self.PanelCorrectionResultsAndDisplay, 0, wx.ALL | wx.EXPAND, 8)

        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, "Results and Display Control"), wx.VERTICAL)

        grid_sizer_6 = wx.FlexGridSizer(3, 6, 4, 4)
        sizer_5.Add(grid_sizer_6, 0, wx.ALL | wx.EXPAND, 4)

        label_1 = wx.StaticText(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, "FID index : ")
        grid_sizer_6.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 2)

        self.SpinFidIndex = wx.SpinCtrl(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, "", min=0, max=100, style=0)
        grid_sizer_6.Add(self.SpinFidIndex, 0, wx.ALIGN_CENTER_VERTICAL, 2)

        self.label_13 = wx.StaticText(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, "1D Plot : ", style=wx.ALIGN_RIGHT)
        grid_sizer_6.Add(self.label_13, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 6)

        self.ComboDataExclusionPlotDisplay = wx.ComboBox(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, choices=["FID Abs First Point", "Peak Shift [Hz]", "Peak Phase [deg]"], style=wx.CB_READONLY)
        grid_sizer_6.Add(self.ComboDataExclusionPlotDisplay, 0, wx.ALIGN_CENTER_VERTICAL, 2)

        label_30 = wx.StaticText(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, "2D Plot Start [ppm] : ", style=wx.ALIGN_RIGHT)
        grid_sizer_6.Add(label_30, 0, wx.ALIGN_RIGHT, 0)

        self.FloatWaterfallRangeStart = FloatSpin(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT)
        grid_sizer_6.Add(self.FloatWaterfallRangeStart, 0, 0, 0)

        label_11 = wx.StaticText(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, "Current FID Peak Shift [Hz] : ")
        grid_sizer_6.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 8)

        self.FloatCurrentPeakShiftValue = FloatSpin(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatCurrentPeakShiftValue.SetMinSize((80, -1))
        grid_sizer_6.Add(self.FloatCurrentPeakShiftValue, 0, 0, 2)

        grid_sizer_6.Add((20, 20), 0, 0, 0)

        grid_sizer_6.Add((20, 20), 0, 0, 0)

        label_31 = wx.StaticText(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, "2D Plot End [ppm] : ", style=wx.ALIGN_RIGHT)
        grid_sizer_6.Add(label_31, 0, wx.ALIGN_RIGHT, 0)

        self.FloatWaterfallRangeEnd = FloatSpin(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT)
        grid_sizer_6.Add(self.FloatWaterfallRangeEnd, 0, 0, 0)

        label_3 = wx.StaticText(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, "Current FID Phase 0 [deg] : ")
        grid_sizer_6.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 8)

        self.FloatCurrentPhase0Value = FloatSpin(self.PanelCorrectionResultsAndDisplay, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatCurrentPhase0Value.SetMinSize((80, -1))
        grid_sizer_6.Add(self.FloatCurrentPhase0Value, 0, 0, 2)

        grid_sizer_6.Add((20, 20), 0, 0, 0)

        grid_sizer_6.Add((20, 20), 0, 0, 0)

        grid_sizer_6.Add((20, 20), 0, 0, 0)

        grid_sizer_6.Add((20, 20), 0, 0, 0)

        self.PanelAdjustSummedData = wx.Panel(self.PanelPrepFidsum, wx.ID_ANY, style=wx.BORDER_RAISED)
        sizer_1.Add(self.PanelAdjustSummedData, 0, wx.ALL | wx.EXPAND, 8)

        sizer_30 = wx.StaticBoxSizer(wx.StaticBox(self.PanelAdjustSummedData, wx.ID_ANY, "Process Step 4 - Summed FID Creation and Manual Adjustments"), wx.VERTICAL)

        grid_sizer_2 = wx.FlexGridSizer(4, 5, 2, 2)
        sizer_30.Add(grid_sizer_2, 1, wx.ALL | wx.EXPAND, 4)

        label_2 = wx.StaticText(self.PanelAdjustSummedData, wx.ID_ANY, "*GaussApod [Hz] : ")
        label_2.SetToolTip("Apodization is only applied to the spectra displayed in the Plot for visualization, not to the summed averages FID that is the final result of this Block processing.")
        grid_sizer_2.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.FloatGlobalGaussApodize = FloatSpin(self.PanelAdjustSummedData, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatGlobalGaussApodize.SetMinSize((80, -1))
        grid_sizer_2.Add(self.FloatGlobalGaussApodize, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_9 = wx.StaticText(self.PanelAdjustSummedData, wx.ID_ANY, " * Only in Display")
        grid_sizer_2.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.ButtonClearIndices = wx.Button(self.PanelAdjustSummedData, wx.ID_ANY, "Reset Exclude Indices")
        grid_sizer_2.Add(self.ButtonClearIndices, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 2)

        self.CheckApplyDataExclusion = wx.CheckBox(self.PanelAdjustSummedData, wx.ID_ANY, " Apply Data Exclusion")
        grid_sizer_2.Add(self.CheckApplyDataExclusion, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 8)

        label_29 = wx.StaticText(self.PanelAdjustSummedData, wx.ID_ANY, "Left Shift [pts] : ")
        label_29.SetToolTip("Left Shift is applied to the summed averages FID that is the final result of this Block processing.\n")
        grid_sizer_2.Add(label_29, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 2)

        self.SpinGlobalLeftShift = wx.SpinCtrl(self.PanelAdjustSummedData, wx.ID_ANY, "0", min=0, max=100)
        self.SpinGlobalLeftShift.SetToolTip("Left Shift is applied to the summed averages FID that is the final result of this Block processing.\n")
        grid_sizer_2.Add(self.SpinGlobalLeftShift, 0, wx.EXPAND, 0)

        self.CheckChop = wx.CheckBox(self.PanelAdjustSummedData, wx.ID_ANY, " Chop Data")
        grid_sizer_2.Add(self.CheckChop, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        self.ButtonResetPeakShift = wx.Button(self.PanelAdjustSummedData, wx.ID_ANY, "Reset Peak Shifts")
        grid_sizer_2.Add(self.ButtonResetPeakShift, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.LEFT | wx.RIGHT, 2)

        self.CheckApplyPeakShift = wx.CheckBox(self.PanelAdjustSummedData, wx.ID_ANY, " Apply Peak Shift corrections")
        self.CheckApplyPeakShift.SetValue(1)
        grid_sizer_2.Add(self.CheckApplyPeakShift, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 8)

        label_28 = wx.StaticText(self.PanelAdjustSummedData, wx.ID_ANY, "Phase0 [deg] : ")
        label_28.SetToolTip("Constant phase 0 value that is applied to the summed averages FID that is the final result of this Block processing.\n")
        grid_sizer_2.Add(label_28, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)

        self.FloatGlobalPhase0 = FloatSpin(self.PanelAdjustSummedData, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatGlobalPhase0.SetMinSize((80, -1))
        self.FloatGlobalPhase0.SetToolTip("Constant phase 0 value that is applied to the summed averages FID that is the final result of this Block processing.")
        grid_sizer_2.Add(self.FloatGlobalPhase0, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_2.Add((20, 20), 0, 0, 0)

        self.ButtonResetPhase0 = wx.Button(self.PanelAdjustSummedData, wx.ID_ANY, "Reset Phase0")
        grid_sizer_2.Add(self.ButtonResetPhase0, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.LEFT | wx.RIGHT, 2)

        self.CheckApplyPhase0 = wx.CheckBox(self.PanelAdjustSummedData, wx.ID_ANY, " Apply Phase0 corrections")
        self.CheckApplyPhase0.SetValue(1)
        grid_sizer_2.Add(self.CheckApplyPhase0, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 8)

        self.label_4 = wx.StaticText(self.PanelAdjustSummedData, wx.ID_ANY, "Phase 1 [deg] : ")
        self.label_4.SetToolTip("Constant phase 1 value that is applied to the summed averages FID that is the final result of this Block processing.")
        grid_sizer_2.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 2)

        self.FloatGlobalPhase1 = FloatSpin(self.PanelAdjustSummedData, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatGlobalPhase1.SetMinSize((80, -1))
        self.FloatGlobalPhase1.SetToolTip("Constant phase 1 value that is applied to the summed averages FID that is the final result of this Block processing.")
        grid_sizer_2.Add(self.FloatGlobalPhase1, 0, wx.ALIGN_CENTER_VERTICAL, 2)

        self.CheckZeroGlobalPhase1 = wx.CheckBox(self.PanelAdjustSummedData, wx.ID_ANY, "Zero Phase 1")
        self.CheckZeroGlobalPhase1.SetToolTip("If ON, will keep Phase 1 value set to 0.0 regardless of mouse or keyboard input.")
        grid_sizer_2.Add(self.CheckZeroGlobalPhase1, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 4)

        self.ButtonCalculateCorrections = wx.Button(self.PanelAdjustSummedData, wx.ID_ANY, "Calculate Corrections")
        grid_sizer_2.Add(self.ButtonCalculateCorrections, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 2)

        self.CheckAutoCalculate = wx.CheckBox(self.PanelAdjustSummedData, wx.ID_ANY, "  Auto Calculate Corrections")
        grid_sizer_2.Add(self.CheckAutoCalculate, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 6)

        self.PanelFidRunPush = wx.Panel(self.PanelPrepFidsum, wx.ID_ANY)
        sizer_1.Add(self.PanelFidRunPush, 0, wx.ALL | wx.EXPAND, 5)

        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)

        self.ButtonPushResults = wx.Button(self.PanelFidRunPush, wx.ID_ANY, "Push FreqShift/Phase0 Correction Results to Associated Datasets")
        self.ButtonPushResults.SetToolTip("Typically applied to On/Off/Sum/DIff datasets from Edited pulse sequences.")
        sizer_11.Add(self.ButtonPushResults, 0, wx.LEFT, 10)

        sizer_1.Add((0, 0), 0, 0, 0)

        self.window_1_pane_2 = wx.ScrolledWindow(self.SplitterWindow, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.window_1_pane_2.SetScrollRate(10, 10)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)

        self.SplitterTopBottom = wx.SplitterWindow(self.window_1_pane_2, wx.ID_ANY)
        self.SplitterTopBottom.SetMinimumPaneSize(20)
        sizer_4.Add(self.SplitterTopBottom, 1, wx.EXPAND, 0)

        self.SplitterTopLeftRight = wx.SplitterWindow(self.SplitterTopBottom, wx.ID_ANY)
        self.SplitterTopLeftRight.SetMinimumPaneSize(20)

        self.PanelViewPrepFidsumImage = wx.Panel(self.SplitterTopLeftRight, wx.ID_ANY, style=wx.BORDER_SIMPLE | wx.TAB_TRAVERSAL)

        self.PanelViewPrepFidsumSeries = wx.Panel(self.SplitterTopLeftRight, wx.ID_ANY, style=wx.BORDER_SIMPLE | wx.TAB_TRAVERSAL)

        self.PanelViewPrepFidsum = wx.Panel(self.SplitterTopBottom, wx.ID_ANY, style=wx.BORDER_SIMPLE | wx.TAB_TRAVERSAL)

        self.SplitterTopLeftRight.SplitVertically(self.PanelViewPrepFidsumImage, self.PanelViewPrepFidsumSeries)

        self.SplitterTopBottom.SplitHorizontally(self.SplitterTopLeftRight, self.PanelViewPrepFidsum)

        self.window_1_pane_2.SetSizer(sizer_4)

        self.PanelFidRunPush.SetSizer(sizer_11)

        self.PanelAdjustSummedData.SetSizer(sizer_30)

        self.PanelCorrectionResultsAndDisplay.SetSizer(sizer_5)

        self.panel_3.SetSizer(grid_sizer_9)

        self.PanelCorrectionsSuspectRats.SetSizer(sizer_22)

        self.panel_2.SetSizer(grid_sizer_8)

        self.PanelCorrectionsSuspectSpectralRegistration.SetSizer(sizer_21)

        self.PanelCorrectionsVespaCorrelate.SetSizer(sizer_7)

        self.panel_1.SetSizer(grid_sizer_7)

        self.PanelCorrectionsVespa.SetSizer(sizer_20)

        self.PanelFidCorrection.SetSizer(sizer_9)

        self.PanelExclusionFidaWorstN.SetSizer(sizer_28)

        self.PanelExclusionFidaRmBad.SetSizer(sizer_27)

        self.PanelExclusionManualOptions.SetSizer(sizer_16)

        self.PanelDataExclusion.SetSizer(sizer_13)

        self.PanelCoilCombineExternalDataset.SetSizer(sizer_17)

        self.PanelCoilCombination.SetSizer(sizer_8)

        self.PanelPrepFidsum.SetSizer(sizer_1)

        self.SplitterWindow.SplitVertically(self.PanelPrepFidsum, self.window_1_pane_2)

        self.SetSizer(self.SizerSplitterWindow)

        self.Layout()

        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.on_splitter, self.SplitterWindow)
        self.Bind(wx.EVT_COMBOBOX, self.on_coil_combine_method, self.ComboCoilCombineMethod)
        self.Bind(wx.EVT_CHECKBOX, self.on_apply_noise_whitening, self.CheckApplyNoiseWhitening)
        self.Bind(wx.EVT_BUTTON, self.on_coil_combine_external_dataset_browse, self.ButtonCoilCombineExternalBrowse)
        self.Bind(wx.EVT_COMBOBOX, self.on_exclusion_method, self.ComboExclusionMethod)
        self.Bind(wx.EVT_CHECKBOX, self.on_exclusions_input_adjust, self.CheckExclusionInputAdjust)
        self.Bind(wx.EVT_BUTTON, self.on_toggle_current_index, self.ButtonToggleCurrentIndex)
        self.Bind( EVT_FLOATSPIN, self.on_exclusion_auto_fida_bad_threshold, self.FloatExclusionAutoFidaBadThreshold)
        self.Bind(wx.EVT_CHOICE, self.on_exclusion_auto_fida_bad_domain, self.ChoiceExclusionAutoFidaBadDomain)
        self.Bind(wx.EVT_SPINCTRL, self.on_exclusion_auto_fida_worst_n, self.SpinExclusionAutoFidaWorstN)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_exclusion_auto_fida_worst_n, self.SpinExclusionAutoFidaWorstN)
        self.Bind(wx.EVT_TEXT, self.on_data_exclusion_indices, self.TextDataExclusion)
        self.Bind(wx.EVT_COMBOBOX, self.on_correction_method, self.ComboCorrectionMethod)
        self.Bind(wx.EVT_CHECKBOX, self.on_correction_input_adjust, self.CheckCorrectionInputAdjust)
        self.Bind( EVT_FLOATSPIN, self.on_vespa_reference_peak_center, self.FloatVespaReferencePeakCenter)
        self.Bind( EVT_FLOATSPIN, self.on_vespa_phase0_range_start, self.FloatVespaPhase0RangeStart)
        self.Bind( EVT_FLOATSPIN, self.on_vespa_peak_search_width, self.FloatVespaPeakSearchWidth)
        self.Bind( EVT_FLOATSPIN, self.on_vespa_phase0_range_end, self.FloatVespaPhase0RangeEnd)
        self.Bind(wx.EVT_COMBOBOX, self.on_vespa_target_spectrum, self.ComboTargetSpectrumVespa)
        self.Bind(wx.EVT_BUTTON, self.on_vespa_correlate_prior, self.ButtonVespaCorrelatePrior)
        self.Bind( EVT_FLOATSPIN, self.on_suspect_initial_guess_freq, self.FloatSuspectInitialGuessFreqShift)
        self.Bind( EVT_FLOATSPIN, self.on_suspect_optimize_range_start, self.FloatSuspectOptimizeRangeStart)
        self.Bind( EVT_FLOATSPIN, self.on_suspect_initial_guess_phase, self.FloatSuspectInitialGuessPhase)
        self.Bind( EVT_FLOATSPIN, self.on_suspect_optimize_range_end, self.FloatSuspectOptimizeRangeEnd)
        self.Bind(wx.EVT_COMBOBOX, self.on_suspect_target_spectrum, self.ComboTargetSpectrumSuspectSpectral)
        self.Bind( EVT_FLOATSPIN, self.on_rats_initial_guess_freq, self.FloatRatsInitialGuessFreqShift)
        self.Bind( EVT_FLOATSPIN, self.on_rats_optimize_range_start, self.FloatRatsOptimizeRangeStart)
        self.Bind( EVT_FLOATSPIN, self.on_rats_initial_guess_phase, self.FloatRatsInitialGuessPhase)
        self.Bind( EVT_FLOATSPIN, self.on_rats_optimize_range_end, self.FloatRatsOptimizeRangeEnd)
        self.Bind(wx.EVT_SPINCTRL, self.on_rats_baseline_order, self.SpinRatsBaselineOrder)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_rats_baseline_order, self.SpinRatsBaselineOrder)
        self.Bind(wx.EVT_COMBOBOX, self.on_rats_target_spectrum, self.ComboTargetSpectrumSuspectRats)
        self.Bind(wx.EVT_SPINCTRL, self.on_fid_index, self.SpinFidIndex)
        self.Bind(wx.EVT_COMBOBOX, self.on_data_exclusion_plot_display, self.ComboDataExclusionPlotDisplay)
        self.Bind( EVT_FLOATSPIN, self.on_waterfall_range_start, self.FloatWaterfallRangeStart)
        self.Bind( EVT_FLOATSPIN, self.on_current_peak_shift_value, self.FloatCurrentPeakShiftValue)
        self.Bind( EVT_FLOATSPIN, self.on_waterfall_range_end, self.FloatWaterfallRangeEnd)
        self.Bind( EVT_FLOATSPIN, self.on_current_phase0_value, self.FloatCurrentPhase0Value)
        self.Bind( EVT_FLOATSPIN, self.on_global_gauss_apodize, self.FloatGlobalGaussApodize)
        self.Bind(wx.EVT_BUTTON, self.on_clear_indices, self.ButtonClearIndices)
        self.Bind(wx.EVT_CHECKBOX, self.on_apply_data_exclusion, self.CheckApplyDataExclusion)
        self.Bind(wx.EVT_SPINCTRL, self.on_global_left_shift, self.SpinGlobalLeftShift)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_global_left_shift, self.SpinGlobalLeftShift)
        self.Bind(wx.EVT_CHECKBOX, self.on_chop, self.CheckChop)
        self.Bind(wx.EVT_BUTTON, self.on_reset_peak_shift, self.ButtonResetPeakShift)
        self.Bind(wx.EVT_CHECKBOX, self.on_apply_peak_shift, self.CheckApplyPeakShift)
        self.Bind( EVT_FLOATSPIN, self.on_global_phase0, self.FloatGlobalPhase0)
        self.Bind(wx.EVT_BUTTON, self.on_reset_phase0, self.ButtonResetPhase0)
        self.Bind(wx.EVT_CHECKBOX, self.on_apply_phase0, self.CheckApplyPhase0)
        self.Bind( EVT_FLOATSPIN, self.on_global_phase1, self.FloatGlobalPhase1)
        self.Bind(wx.EVT_CHECKBOX, self.on_zero_global_phase1, self.CheckZeroGlobalPhase1)
        self.Bind(wx.EVT_BUTTON, self.on_calculate_corrections, self.ButtonCalculateCorrections)
        self.Bind(wx.EVT_CHECKBOX, self.on_auto_calculate, self.CheckAutoCalculate)
        self.Bind(wx.EVT_BUTTON, self.on_push_results, self.ButtonPushResults)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.on_splitter_topbottom, self.SplitterTopBottom)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.on_splitter_leftright, self.SplitterTopLeftRight)
        # end wxGlade

    def on_splitter(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_splitter' not implemented!")
        event.Skip()

    def on_coil_combine_method(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_coil_combine_method' not implemented!")
        event.Skip()

    def on_apply_noise_whitening(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_apply_noise_whitening' not implemented!")
        event.Skip()

    def on_coil_combine_external_dataset_browse(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_coil_combine_external_dataset_browse' not implemented!")
        event.Skip()

    def on_exclusion_method(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_exclusion_method' not implemented!")
        event.Skip()

    def on_exclusions_input_adjust(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_exclusions_input_adjust' not implemented!")
        event.Skip()

    def on_toggle_current_index(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_toggle_current_index' not implemented!")
        event.Skip()

    def on_exclusion_auto_fida_bad_threshold(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_exclusion_auto_fida_bad_threshold' not implemented!")
        event.Skip()

    def on_exclusion_auto_fida_bad_domain(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_exclusion_auto_fida_bad_domain' not implemented!")
        event.Skip()

    def on_exclusion_auto_fida_worst_n(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_exclusion_auto_fida_worst_n' not implemented!")
        event.Skip()

    def on_data_exclusion_indices(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_data_exclusion_indices' not implemented!")
        event.Skip()

    def on_correction_method(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_correction_method' not implemented!")
        event.Skip()

    def on_correction_input_adjust(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_correction_input_adjust' not implemented!")
        event.Skip()

    def on_vespa_reference_peak_center(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_vespa_reference_peak_center' not implemented!")
        event.Skip()

    def on_vespa_phase0_range_start(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_vespa_phase0_range_start' not implemented!")
        event.Skip()

    def on_vespa_peak_search_width(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_vespa_peak_search_width' not implemented!")
        event.Skip()

    def on_vespa_phase0_range_end(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_vespa_phase0_range_end' not implemented!")
        event.Skip()

    def on_vespa_target_spectrum(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_vespa_target_spectrum' not implemented!")
        event.Skip()

    def on_vespa_correlate_prior(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_vespa_correlate_prior' not implemented!")
        event.Skip()

    def on_suspect_initial_guess_freq(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_suspect_initial_guess_freq' not implemented!")
        event.Skip()

    def on_suspect_optimize_range_start(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_suspect_optimize_range_start' not implemented!")
        event.Skip()

    def on_suspect_initial_guess_phase(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_suspect_initial_guess_phase' not implemented!")
        event.Skip()

    def on_suspect_optimize_range_end(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_suspect_optimize_range_end' not implemented!")
        event.Skip()

    def on_suspect_target_spectrum(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_suspect_target_spectrum' not implemented!")
        event.Skip()

    def on_rats_initial_guess_freq(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_rats_initial_guess_freq' not implemented!")
        event.Skip()

    def on_rats_optimize_range_start(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_rats_optimize_range_start' not implemented!")
        event.Skip()

    def on_rats_initial_guess_phase(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_rats_initial_guess_phase' not implemented!")
        event.Skip()

    def on_rats_optimize_range_end(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_rats_optimize_range_end' not implemented!")
        event.Skip()

    def on_rats_baseline_order(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_rats_baseline_order' not implemented!")
        event.Skip()

    def on_rats_target_spectrum(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_rats_target_spectrum' not implemented!")
        event.Skip()

    def on_fid_index(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_fid_index' not implemented!")
        event.Skip()

    def on_data_exclusion_plot_display(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_data_exclusion_plot_display' not implemented!")
        event.Skip()

    def on_waterfall_range_start(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_waterfall_range_start' not implemented!")
        event.Skip()

    def on_current_peak_shift_value(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_current_peak_shift_value' not implemented!")
        event.Skip()

    def on_waterfall_range_end(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_waterfall_range_end' not implemented!")
        event.Skip()

    def on_current_phase0_value(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_current_phase0_value' not implemented!")
        event.Skip()

    def on_global_gauss_apodize(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_global_gauss_apodize' not implemented!")
        event.Skip()

    def on_clear_indices(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_clear_indices' not implemented!")
        event.Skip()

    def on_apply_data_exclusion(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_apply_data_exclusion' not implemented!")
        event.Skip()

    def on_global_left_shift(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_global_left_shift' not implemented!")
        event.Skip()

    def on_chop(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_chop' not implemented!")
        event.Skip()

    def on_reset_peak_shift(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_reset_peak_shift' not implemented!")
        event.Skip()

    def on_apply_peak_shift(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_apply_peak_shift' not implemented!")
        event.Skip()

    def on_global_phase0(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_global_phase0' not implemented!")
        event.Skip()

    def on_reset_phase0(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_reset_phase0' not implemented!")
        event.Skip()

    def on_apply_phase0(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_apply_phase0' not implemented!")
        event.Skip()

    def on_global_phase1(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_global_phase1' not implemented!")
        event.Skip()

    def on_zero_global_phase1(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_zero_global_phase1' not implemented!")
        event.Skip()

    def on_calculate_corrections(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_calculate_corrections' not implemented!")
        event.Skip()

    def on_auto_calculate(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_auto_calculate' not implemented!")
        event.Skip()

    def on_push_results(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_push_results' not implemented!")
        event.Skip()

    def on_splitter_topbottom(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_splitter_topbottom' not implemented!")
        event.Skip()

    def on_splitter_leftright(self, event):  # wxGlade: PanelPrepFidsumUI.<event_handler>
        print("Event handler 'on_splitter_leftright' not implemented!")
        event.Skip()

# end of class PanelPrepFidsumUI

class MyFrame1(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame1.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1316, 1036))
        self.SetTitle("frame_2")

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        self.PanelPrepFidsumUI = PanelPrepFidsumUI(self, wx.ID_ANY)
        sizer_2.Add(self.PanelPrepFidsumUI, 1, wx.ALL | wx.EXPAND, 4)

        self.SetSizer(sizer_2)

        self.Layout()
        # end wxGlade

# end of class MyFrame1
