# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.0 on Sat Jan 23 15:06:35 2021
#

import wx

# begin wxGlade: dependencies
from vespa.common.wx_gravy.widgets.floatspin_multiplier.floatspin_multiplier_base import FloatSpinMultiplier
from wx.lib.agw.floatspin import FloatSpin, EVT_FLOATSPIN, FS_LEFT, FS_RIGHT, FS_CENTRE, FS_READONLY
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PanelSpectralUI(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PanelSpectralUI.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        self.NotebookSpectral = wx.Notebook(self, wx.ID_ANY, style=0)
        sizer_2.Add(self.NotebookSpectral, 1, wx.EXPAND, 0)

        self.PanelParameters = wx.Panel(self.NotebookSpectral, wx.ID_ANY)
        self.NotebookSpectral.AddPage(self.PanelParameters, "General Parameters")

        self.SizerSplitterWindow = wx.BoxSizer(wx.VERTICAL)

        self.SplitterWindow = wx.SplitterWindow(self.PanelParameters, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.SplitterWindow.SetMinimumPaneSize(20)
        self.SizerSplitterWindow.Add(self.SplitterWindow, 1, wx.EXPAND, 0)

        self.PanelSpectralControls = wx.Panel(self.SplitterWindow, wx.ID_ANY)

        sizer_28 = wx.BoxSizer(wx.VERTICAL)

        self.PanelSpectral = wx.Panel(self.PanelSpectralControls, wx.ID_ANY)
        sizer_28.Add(self.PanelSpectral, 1, wx.EXPAND, 0)

        SizerSpectral = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        SizerSpectral.Add(sizer_3, 0, wx.ALIGN_RIGHT | wx.BOTTOM | wx.TOP, 6)

        self.CheckSync = wx.CheckBox(self.PanelSpectral, wx.ID_ANY, "Sync")
        sizer_3.Add(self.CheckSync, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 12)

        label_1 = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "Plot B:")
        sizer_3.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)

        self.ComboDataB = wx.ComboBox(self.PanelSpectral, wx.ID_ANY, choices=[], style=wx.CB_READONLY)
        sizer_3.Add(self.ComboDataB, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 4)

        sizer_118 = wx.BoxSizer(wx.HORIZONTAL)
        SizerSpectral.Add(sizer_118, 0, wx.ALIGN_RIGHT | wx.BOTTOM | wx.TOP, 6)

        self.CheckFlip = wx.CheckBox(self.PanelSpectral, wx.ID_ANY, "Flip X-axis")
        sizer_118.Add(self.CheckFlip, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)

        self.CheckFFT = wx.CheckBox(self.PanelSpectral, wx.ID_ANY, "FFT")
        self.CheckFFT.SetValue(1)
        sizer_118.Add(self.CheckFFT, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)

        self.CheckChop = wx.CheckBox(self.PanelSpectral, wx.ID_ANY, "Chop")
        self.CheckChop.SetValue(1)
        sizer_118.Add(self.CheckChop, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 6)

        self.static_line_1 = wx.StaticLine(self.PanelSpectral, wx.ID_ANY)
        SizerSpectral.Add(self.static_line_1, 0, wx.ALL | wx.EXPAND, 5)

        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        SizerSpectral.Add(sizer_34, 0, wx.ALIGN_RIGHT | wx.BOTTOM | wx.RIGHT, 4)

        labelEddy = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "Eddy Current Correction Filter: ")
        sizer_34.Add(labelEddy, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 3)

        self.ComboEcc = wx.ComboBox(self.PanelSpectral, wx.ID_ANY, choices=["None", "ECC-Simple", "ECC-Klose"], style=wx.CB_READONLY)
        sizer_34.Add(self.ComboEcc, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.PanelEccBrowse = wx.Panel(self.PanelSpectral, wx.ID_ANY)
        self.PanelEccBrowse.Hide()
        SizerSpectral.Add(self.PanelEccBrowse, 0, wx.ALL | wx.EXPAND, 2)

        sizer_3_copy = wx.BoxSizer(wx.HORIZONTAL)

        self.ButtonEccBrowse = wx.Button(self.PanelEccBrowse, wx.ID_ANY, " ECC Data Browse ...")
        sizer_3_copy.Add(self.ButtonEccBrowse, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)

        self.TextEccFilename = wx.TextCtrl(self.PanelEccBrowse, wx.ID_ANY, "", style=wx.TE_READONLY)
        sizer_3_copy.Add(self.TextEccFilename, 1, wx.EXPAND, 0)

        self.static_line_2 = wx.StaticLine(self.PanelSpectral, wx.ID_ANY)
        SizerSpectral.Add(self.static_line_2, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 5)

        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        SizerSpectral.Add(sizer_36, 0, wx.ALIGN_RIGHT | wx.RIGHT, 4)

        labelWater = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "Signal Filtering: ")
        sizer_36.Add(labelWater, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)

        self.ComboWater = wx.ComboBox(self.PanelSpectral, wx.ID_ANY, choices=["None", "FIR - water filter", "Hamming - waterfilter", "SVD Filter"], style=wx.CB_READONLY)
        sizer_36.Add(self.ComboWater, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.PanelWaterFir = wx.Panel(self.PanelSpectral, wx.ID_ANY)
        SizerSpectral.Add(self.PanelWaterFir, 0, wx.ALL | wx.EXPAND, 2)

        sizer_15 = wx.BoxSizer(wx.VERTICAL)

        sizer_3_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15.Add(sizer_3_copy_1, 1, wx.ALIGN_RIGHT, 0)

        Length = wx.StaticText(self.PanelWaterFir, wx.ID_ANY, "FIR Filter Length:")
        sizer_3_copy_1.Add(Length, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.SpinFirLength = wx.SpinCtrl(self.PanelWaterFir, wx.ID_ANY, "", min=0, max=100)
        self.SpinFirLength.SetMinSize((60, -1))
        sizer_3_copy_1.Add(self.SpinFirLength, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15.Add(sizer_4, 1, wx.ALIGN_RIGHT, 0)

        LabelFirWidth = wx.StaticText(self.PanelWaterFir, wx.ID_ANY, "FIR 1/2 Width: ")
        sizer_4.Add(LabelFirWidth, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.FloatFirWidth = FloatSpin(self.PanelWaterFir, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatFirWidth.SetMinSize((80, -1))
        sizer_4.Add(self.FloatFirWidth, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        LabelFirRipple = wx.StaticText(self.PanelWaterFir, wx.ID_ANY, "FIR Ripple [dB]: ")
        sizer_4.Add(LabelFirRipple, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.FloatFirRipple = FloatSpin(self.PanelWaterFir, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatFirRipple.SetMinSize((80, -1))
        sizer_4.Add(self.FloatFirRipple, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15.Add(sizer_5, 1, wx.ALIGN_RIGHT, 0)

        LabelFirExtrapolation = wx.StaticText(self.PanelWaterFir, wx.ID_ANY, "Extrapolation: ")
        sizer_5.Add(LabelFirExtrapolation, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.ComboFirExtrapMethod = wx.ComboBox(self.PanelWaterFir, wx.ID_ANY, choices=["None", "Linear", "AR Model"], style=wx.CB_READONLY)
        self.ComboFirExtrapMethod.SetSelection(1)
        sizer_5.Add(self.ComboFirExtrapMethod, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        LabelFirExtrap = wx.StaticText(self.PanelWaterFir, wx.ID_ANY, "    Extrap Pts:")
        sizer_5.Add(LabelFirExtrap, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.SpinFirExtrapValue = wx.SpinCtrl(self.PanelWaterFir, wx.ID_ANY, "", min=0, max=100)
        self.SpinFirExtrapValue.SetMinSize((60, -1))
        sizer_5.Add(self.SpinFirExtrapValue, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.PanelWaterHamming = wx.Panel(self.PanelSpectral, wx.ID_ANY)
        SizerSpectral.Add(self.PanelWaterHamming, 0, wx.ALL | wx.EXPAND, 2)

        sizer_2_copy = wx.BoxSizer(wx.VERTICAL)

        sizer_3_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy.Add(sizer_3_copy_2, 0, wx.ALIGN_RIGHT, 0)

        Length_copy = wx.StaticText(self.PanelWaterHamming, wx.ID_ANY, "Hamming Filter Length:")
        sizer_3_copy_2.Add(Length_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.SpinHamLength = wx.SpinCtrl(self.PanelWaterHamming, wx.ID_ANY, "", min=0, max=100)
        self.SpinHamLength.SetMinSize((60, -1))
        sizer_3_copy_2.Add(self.SpinHamLength, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_4_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy.Add(sizer_4_copy, 0, wx.ALIGN_RIGHT, 0)

        LabelHamExtrapMethod = wx.StaticText(self.PanelWaterHamming, wx.ID_ANY, "Extrapolation:")
        sizer_4_copy.Add(LabelHamExtrapMethod, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.ComboHamExtrapMethod = wx.ComboBox(self.PanelWaterHamming, wx.ID_ANY, choices=["None", "Linear", "AR Model"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.ComboHamExtrapMethod.SetSelection(0)
        sizer_4_copy.Add(self.ComboHamExtrapMethod, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        labelHamExtrapValue = wx.StaticText(self.PanelWaterHamming, wx.ID_ANY, "    Extrap Pts:")
        sizer_4_copy.Add(labelHamExtrapValue, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.SpinHamExtrapValue = wx.SpinCtrl(self.PanelWaterHamming, wx.ID_ANY, "", min=0, max=100)
        self.SpinHamExtrapValue.SetMinSize((60, -1))
        sizer_4_copy.Add(self.SpinHamExtrapValue, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.static_line_6 = wx.StaticLine(self.PanelSpectral, wx.ID_ANY)
        SizerSpectral.Add(self.static_line_6, 0, wx.ALL | wx.EXPAND, 5)

        sizer_1127 = wx.BoxSizer(wx.HORIZONTAL)
        SizerSpectral.Add(sizer_1127, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        ZeroFill = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "Zero Fill Multiplier:")
        sizer_1127.Add(ZeroFill, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)

        self.ComboZeroFill = wx.ComboBox(self.PanelSpectral, wx.ID_ANY, choices=["1", "2", "4", "8", "16", "32"], style=wx.CB_READONLY)
        sizer_1127.Add(self.ComboZeroFill, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_1124 = wx.BoxSizer(wx.HORIZONTAL)
        SizerSpectral.Add(sizer_1124, 0, wx.ALIGN_RIGHT | wx.ALL, 3)

        labelApodization = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "Apodize: ")
        sizer_1124.Add(labelApodization, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)

        self.ComboApodization = wx.ComboBox(self.PanelSpectral, wx.ID_ANY, choices=["None", "Gaussian", "Lorentzian"], style=wx.CB_READONLY)
        self.ComboApodization.SetSelection(0)
        sizer_1124.Add(self.ComboApodization, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        Width = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "   Width [Hz]:")
        sizer_1124.Add(Width, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 2)

        self.FloatWidth = FloatSpin(self.PanelSpectral, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.SP_WRAP | wx.TE_PROCESS_ENTER)
        self.FloatWidth.SetMinSize((50, -1))
        sizer_1124.Add(self.FloatWidth, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_1 = wx.FlexGridSizer(7, 3, 0, 0)
        SizerSpectral.Add(grid_sizer_1, 0, wx.ALIGN_RIGHT | wx.TOP, 3)

        self.CheckFreqLock = wx.CheckBox(self.PanelSpectral, wx.ID_ANY, "Lock B0")
        grid_sizer_1.Add(self.CheckFreqLock, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        Frequency = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "  B0 Shift [Hz]:")
        grid_sizer_1.Add(Frequency, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        self.FloatFrequency = FloatSpin(self.PanelSpectral, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatFrequency.SetMinSize((80, -1))
        grid_sizer_1.Add(self.FloatFrequency, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 2)

        grid_sizer_1.Add((20, 20), 0, wx.EXPAND, 0)

        Amplitude = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "Area Multiplier:")
        grid_sizer_1.Add(Amplitude, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        self.FloatAmplitude = FloatSpinMultiplier(self.PanelSpectral, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, multiplier=1.1, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatAmplitude.SetMinSize((80, -1))
        grid_sizer_1.Add(self.FloatAmplitude, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 2)

        self.CheckPhaseLock = wx.CheckBox(self.PanelSpectral, wx.ID_ANY, "Lock Ph01")
        grid_sizer_1.Add(self.CheckPhaseLock, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        Phase0 = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "Phase0 [deg]:")
        grid_sizer_1.Add(Phase0, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        self.FloatPhase0 = FloatSpin(self.PanelSpectral, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatPhase0.SetMinSize((80, -1))
        grid_sizer_1.Add(self.FloatPhase0, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 2)

        self.CheckZeroPhase1 = wx.CheckBox(self.PanelSpectral, wx.ID_ANY, "Set Ph1 to Zero")
        grid_sizer_1.Add(self.CheckZeroPhase1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        Phase1 = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "Phase1 [deg]:")
        grid_sizer_1.Add(Phase1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        self.FloatPhase1 = FloatSpin(self.PanelSpectral, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatPhase1.SetMinSize((80, -1))
        grid_sizer_1.Add(self.FloatPhase1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 2)

        grid_sizer_1.Add((20, 20), 0, wx.EXPAND, 0)

        Phase1Pivot = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "Pivot [ppm]:")
        grid_sizer_1.Add(Phase1Pivot, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        self.FloatPhase1Pivot = FloatSpin(self.PanelSpectral, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatPhase1Pivot.SetMinSize((80, -1))
        grid_sizer_1.Add(self.FloatPhase1Pivot, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 2)

        grid_sizer_1.Add((20, 20), 0, wx.EXPAND, 0)

        DCOffset = wx.StaticText(self.PanelSpectral, wx.ID_ANY, "DC Offset:")
        grid_sizer_1.Add(DCOffset, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        self.FloatDcOffset = FloatSpin(self.PanelSpectral, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=wx.SP_ARROW_KEYS | wx.TE_PROCESS_ENTER)
        self.FloatDcOffset.SetMinSize((80, -1))
        grid_sizer_1.Add(self.FloatDcOffset, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 2)

        self.CheckCorrectPhase1 = wx.CheckBox(self.PanelSpectral, wx.ID_ANY, "Correct Phase1")
        self.CheckCorrectPhase1.Hide()
        grid_sizer_1.Add(self.CheckCorrectPhase1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        LeftShift = wx.StaticText(self.PanelSpectral, wx.ID_ANY, " Left Shift [pts]:")
        grid_sizer_1.Add(LeftShift, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 3)

        self.SpinLeftShift = wx.SpinCtrl(self.PanelSpectral, wx.ID_ANY, "", min=0, max=100)
        self.SpinLeftShift.SetMinSize((80, -1))
        grid_sizer_1.Add(self.SpinLeftShift, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.ALL, 2)

        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28.Add(sizer_29, 0, wx.ALL, 3)

        self.ButtonUserFunction = wx.Button(self.PanelSpectralControls, wx.ID_ANY, "Do Automatic Phasing")
        sizer_29.Add(self.ButtonUserFunction, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_8 = wx.StaticText(self.PanelSpectralControls, wx.ID_ANY, "")
        sizer_29.Add(label_8, 0, 0, 0)

        label_9 = wx.StaticText(self.PanelSpectralControls, wx.ID_ANY, "")
        sizer_29.Add(label_9, 0, 0, 0)

        label_10 = wx.StaticText(self.PanelSpectralControls, wx.ID_ANY, "")
        sizer_29.Add(label_10, 0, 0, 0)

        self.window_1_pane_2 = wx.Panel(self.SplitterWindow, wx.ID_ANY)

        sizer_38 = wx.BoxSizer(wx.VERTICAL)

        self.PanelViewSpectral = wx.Panel(self.window_1_pane_2, wx.ID_ANY)
        sizer_38.Add(self.PanelViewSpectral, 1, wx.EXPAND, 0)

        self.PanelSvdFilter = wx.Panel(self.NotebookSpectral, wx.ID_ANY)
        self.NotebookSpectral.AddPage(self.PanelSvdFilter, "SVD Filter Parameters")

        self.SizerSplitterWindowSvd = wx.BoxSizer(wx.VERTICAL)

        self.SplitterWindowSvd = wx.SplitterWindow(self.PanelSvdFilter, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER)
        self.SplitterWindowSvd.SetMinimumPaneSize(20)
        self.SizerSplitterWindowSvd.Add(self.SplitterWindowSvd, 1, wx.EXPAND, 0)

        self.PanelSvd = wx.Panel(self.SplitterWindowSvd, wx.ID_ANY)

        sizer_40 = wx.BoxSizer(wx.VERTICAL)

        sizer_41 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_40.Add(sizer_41, 0, wx.ALL | wx.EXPAND, 8)

        label_1_copy = wx.StaticText(self.PanelSvd, wx.ID_ANY, "Hankel-Lanczos Singular Value Decomposition")
        sizer_41.Add(label_1_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 24)

        self.ButtonSvdReset = wx.Button(self.PanelSvd, wx.ID_ANY, " Reset All Voxels ")
        sizer_41.Add(self.ButtonSvdReset, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.PanelSvdControls = wx.Panel(self.PanelSvd, wx.ID_ANY)
        sizer_40.Add(self.PanelSvdControls, 1, wx.EXPAND, 0)

        sizer_45 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_1_copy = wx.FlexGridSizer(2, 2, 5, 5)
        sizer_45.Add(grid_sizer_1_copy, 0, wx.ALL | wx.EXPAND, 5)

        self.label_2 = wx.StaticText(self.PanelSvdControls, wx.ID_ANY, "Data Points:", style=wx.ALIGN_RIGHT)
        grid_sizer_1_copy.Add(self.label_2, 0, wx.ALIGN_RIGHT | wx.EXPAND, 0)

        self.SliderDataPoints = wx.Slider(self.PanelSvdControls, wx.ID_ANY, 0, 0, 10, style=wx.SL_HORIZONTAL | wx.SL_LABELS)
        grid_sizer_1_copy.Add(self.SliderDataPoints, 0, wx.EXPAND, 0)

        self.label_3 = wx.StaticText(self.PanelSvdControls, wx.ID_ANY, "Exponentials:", style=wx.ALIGN_RIGHT)
        grid_sizer_1_copy.Add(self.label_3, 0, wx.ALIGN_RIGHT | wx.EXPAND, 0)

        self.SliderSingularValues = wx.Slider(self.PanelSvdControls, wx.ID_ANY, 0, 0, 10, style=wx.SL_HORIZONTAL | wx.SL_LABELS)
        grid_sizer_1_copy.Add(self.SliderSingularValues, 0, wx.EXPAND, 0)

        sizer_44 = wx.StaticBoxSizer(wx.StaticBox(self.PanelSvdControls, wx.ID_ANY, "Results - Model Peaks"), wx.VERTICAL)
        sizer_45.Add(sizer_44, 1, wx.EXPAND | wx.TOP, 8)

        self.PanelResults = wx.Panel(self.PanelSvdControls, wx.ID_ANY)
        sizer_44.Add(self.PanelResults, 1, wx.EXPAND, 0)

        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self.PanelSvdControls, wx.ID_ANY, "Peak Selection Methods"), wx.VERTICAL)
        sizer_44.Add(sizer_6, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 0)

        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(sizer_7, 1, wx.EXPAND | wx.TOP, 0)

        self.RadioSvdManual = wx.RadioButton(self.PanelSvdControls, wx.ID_ANY, "Check Box", style=wx.RB_GROUP)
        sizer_7.Add(self.RadioSvdManual, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.RadioSvdCursorSpan = wx.RadioButton(self.PanelSvdControls, wx.ID_ANY, "Cursor Span")
        sizer_7.Add(self.RadioSvdCursorSpan, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.RadioSvdApplyThreshold = wx.RadioButton(self.PanelSvdControls, wx.ID_ANY, "Threshold: ")
        sizer_7.Add(self.RadioSvdApplyThreshold, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.FloatSvdThreshold = FloatSpin(self.PanelSvdControls, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        sizer_7.Add(self.FloatSvdThreshold, 0, 0, 0)

        self.ComboSvdThresholdUnit = wx.ComboBox(self.PanelSvdControls, wx.ID_ANY, choices=["Hz", "PPM"], style=wx.CB_READONLY)
        sizer_7.Add(self.ComboSvdThresholdUnit, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(sizer_8, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 6)

        self.CheckSvdExcludeLipid = wx.CheckBox(self.PanelSvdControls, wx.ID_ANY, " Exclude Lipid Region - Start [PPM]: ")
        sizer_8.Add(self.CheckSvdExcludeLipid, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 4)

        self.FloatSvdExcludeLipidStart = FloatSpin(self.PanelSvdControls, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        sizer_8.Add(self.FloatSvdExcludeLipidStart, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.label_4 = wx.StaticText(self.PanelSvdControls, wx.ID_ANY, "    End: ")
        sizer_8.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.FloatSvdExcludeLipidEnd = FloatSpin(self.PanelSvdControls, wx.ID_ANY, value=0.0, digits=3, min_val=0.0, max_val=100.0, increment=1.0, agwStyle=FS_LEFT, style=0)
        sizer_8.Add(self.FloatSvdExcludeLipidEnd, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_8.Add((0, 0), 0, 0, 0)

        sizer_6_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(sizer_6_copy, 0, wx.EXPAND | wx.TOP, 2)

        self.ButtonAllOn = wx.Button(self.PanelSvdControls, wx.ID_ANY, "All On")
        sizer_6_copy.Add(self.ButtonAllOn, 0, wx.BOTTOM | wx.LEFT | wx.TOP, 4)

        self.ButtonAllOff = wx.Button(self.PanelSvdControls, wx.ID_ANY, "All Off")
        sizer_6_copy.Add(self.ButtonAllOff, 0, wx.BOTTOM | wx.LEFT | wx.TOP, 4)

        self.window_1_pane_2_copy = wx.Panel(self.SplitterWindowSvd, wx.ID_ANY)

        sizer_38_copy = wx.BoxSizer(wx.VERTICAL)

        self.PanelViewSvd = wx.Panel(self.window_1_pane_2_copy, wx.ID_ANY)
        sizer_38_copy.Add(self.PanelViewSvd, 1, wx.EXPAND, 0)

        self.window_1_pane_2_copy.SetSizer(sizer_38_copy)

        grid_sizer_1_copy.AddGrowableCol(1)

        self.PanelSvdControls.SetSizer(sizer_45)

        self.PanelSvd.SetSizer(sizer_40)

        self.SplitterWindowSvd.SplitVertically(self.PanelSvd, self.window_1_pane_2_copy)

        self.PanelSvdFilter.SetSizer(self.SizerSplitterWindowSvd)

        self.window_1_pane_2.SetSizer(sizer_38)

        self.PanelWaterHamming.SetSizer(sizer_2_copy)

        self.PanelWaterFir.SetSizer(sizer_15)

        self.PanelEccBrowse.SetSizer(sizer_3_copy)

        self.PanelSpectral.SetSizer(SizerSpectral)

        self.PanelSpectralControls.SetSizer(sizer_28)

        self.SplitterWindow.SplitVertically(self.PanelSpectralControls, self.window_1_pane_2)

        self.PanelParameters.SetSizer(self.SizerSplitterWindow)

        self.SetSizer(sizer_2)

        self.Layout()

        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.on_splitter, self.SplitterWindow)
        self.Bind(wx.EVT_CHECKBOX, self.on_sync, self.CheckSync)
        self.Bind(wx.EVT_COMBOBOX, self.on_combo_dataB, self.ComboDataB)
        self.Bind(wx.EVT_CHECKBOX, self.on_flip, self.CheckFlip)
        self.Bind(wx.EVT_CHECKBOX, self.on_fft, self.CheckFFT)
        self.Bind(wx.EVT_CHECKBOX, self.on_chop, self.CheckChop)
        self.Bind(wx.EVT_COMBOBOX, self.on_ecc_method, self.ComboEcc)
        self.Bind(wx.EVT_BUTTON, self.on_ecc_browse, self.ButtonEccBrowse)
        self.Bind(wx.EVT_COMBOBOX, self.on_water_method, self.ComboWater)
        self.Bind(wx.EVT_SPINCTRL, self.on_fir_length, self.SpinFirLength)
        self.Bind( EVT_FLOATSPIN, self.on_fir_width, self.FloatFirWidth)
        self.Bind( EVT_FLOATSPIN, self.on_fir_ripple, self.FloatFirRipple)
        self.Bind(wx.EVT_COMBOBOX, self.on_fir_extrap_method, self.ComboFirExtrapMethod)
        self.Bind(wx.EVT_SPINCTRL, self.on_fir_extrap_value, self.SpinFirExtrapValue)
        self.Bind(wx.EVT_SPINCTRL, self.on_ham_length, self.SpinHamLength)
        self.Bind(wx.EVT_COMBOBOX, self.on_ham_extrap_method, self.ComboHamExtrapMethod)
        self.Bind(wx.EVT_SPINCTRL, self.on_ham_extrap_value, self.SpinHamExtrapValue)
        self.Bind(wx.EVT_COMBOBOX, self.on_zero_fill, self.ComboZeroFill)
        self.Bind(wx.EVT_COMBOBOX, self.on_apodization_method, self.ComboApodization)
        self.Bind( EVT_FLOATSPIN, self.on_apodization_value, self.FloatWidth)
        self.Bind(wx.EVT_CHECKBOX, self.on_frequency_shift_lock, self.CheckFreqLock)
        self.Bind( EVT_FLOATSPIN, self.on_b0_shift, self.FloatFrequency)
        self.Bind( EVT_FLOATSPIN, self.on_amplitude, self.FloatAmplitude)
        self.Bind(wx.EVT_CHECKBOX, self.on_phase_lock, self.CheckPhaseLock)
        self.Bind( EVT_FLOATSPIN, self.on_phase0, self.FloatPhase0)
        self.Bind(wx.EVT_CHECKBOX, self.on_phase1_zero, self.CheckZeroPhase1)
        self.Bind( EVT_FLOATSPIN, self.on_phase1, self.FloatPhase1)
        self.Bind( EVT_FLOATSPIN, self.on_phase1_pivot, self.FloatPhase1Pivot)
        self.Bind( EVT_FLOATSPIN, self.on_dc_offset, self.FloatDcOffset)
        self.Bind(wx.EVT_CHECKBOX, self.on_left_shift_correction, self.CheckCorrectPhase1)
        self.Bind(wx.EVT_SPINCTRL, self.on_left_shift_value, self.SpinLeftShift)
        self.Bind(wx.EVT_BUTTON, self.on_user_function, self.ButtonUserFunction)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.on_splitter, self.SplitterWindowSvd)
        self.Bind(wx.EVT_BUTTON, self.on_reset_all, self.ButtonSvdReset)
        self.Bind(wx.EVT_RADIOBUTTON, self.on_svd_manual, self.RadioSvdManual)
        self.Bind(wx.EVT_RADIOBUTTON, self.on_svd_cursor_span_picks_lines, self.RadioSvdCursorSpan)
        self.Bind(wx.EVT_RADIOBUTTON, self.on_svd_apply_threshold, self.RadioSvdApplyThreshold)
        self.Bind( EVT_FLOATSPIN, self.on_svd_threshold, self.FloatSvdThreshold)
        self.Bind(wx.EVT_COMBOBOX, self.on_svd_threshold_unit, self.ComboSvdThresholdUnit)
        self.Bind(wx.EVT_CHECKBOX, self.on_svd_exclude_lipid, self.CheckSvdExcludeLipid)
        self.Bind( EVT_FLOATSPIN, self.on_svd_exclude_lipid_start, self.FloatSvdExcludeLipidStart)
        self.Bind( EVT_FLOATSPIN, self.on_svd_exclude_lipid_end, self.FloatSvdExcludeLipidEnd)
        self.Bind(wx.EVT_BUTTON, self.on_all_on, self.ButtonAllOn)
        self.Bind(wx.EVT_BUTTON, self.on_all_off, self.ButtonAllOff)
        # end wxGlade

    def on_splitter(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_splitter' not implemented!")
        event.Skip()

    def on_sync(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_sync' not implemented!")
        event.Skip()

    def on_combo_dataB(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_combo_dataB' not implemented!")
        event.Skip()

    def on_flip(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_flip' not implemented!")
        event.Skip()

    def on_fft(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_fft' not implemented!")
        event.Skip()

    def on_chop(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_chop' not implemented!")
        event.Skip()

    def on_ecc_method(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_ecc_method' not implemented!")
        event.Skip()

    def on_ecc_browse(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_ecc_browse' not implemented!")
        event.Skip()

    def on_water_method(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_water_method' not implemented!")
        event.Skip()

    def on_fir_length(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_fir_length' not implemented!")
        event.Skip()

    def on_fir_width(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_fir_width' not implemented!")
        event.Skip()

    def on_fir_ripple(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_fir_ripple' not implemented!")
        event.Skip()

    def on_fir_extrap_method(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_fir_extrap_method' not implemented!")
        event.Skip()

    def on_fir_extrap_value(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_fir_extrap_value' not implemented!")
        event.Skip()

    def on_ham_length(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_ham_length' not implemented!")
        event.Skip()

    def on_ham_extrap_method(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_ham_extrap_method' not implemented!")
        event.Skip()

    def on_ham_extrap_value(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_ham_extrap_value' not implemented!")
        event.Skip()

    def on_zero_fill(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_zero_fill' not implemented!")
        event.Skip()

    def on_apodization_method(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_apodization_method' not implemented!")
        event.Skip()

    def on_apodization_value(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_apodization_value' not implemented!")
        event.Skip()

    def on_frequency_shift_lock(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_frequency_shift_lock' not implemented!")
        event.Skip()

    def on_b0_shift(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_b0_shift' not implemented!")
        event.Skip()

    def on_amplitude(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_amplitude' not implemented!")
        event.Skip()

    def on_phase_lock(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_phase_lock' not implemented!")
        event.Skip()

    def on_phase0(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_phase0' not implemented!")
        event.Skip()

    def on_phase1_zero(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_phase1_zero' not implemented!")
        event.Skip()

    def on_phase1(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_phase1' not implemented!")
        event.Skip()

    def on_phase1_pivot(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_phase1_pivot' not implemented!")
        event.Skip()

    def on_dc_offset(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_dc_offset' not implemented!")
        event.Skip()

    def on_left_shift_correction(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_left_shift_correction' not implemented!")
        event.Skip()

    def on_left_shift_value(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_left_shift_value' not implemented!")
        event.Skip()

    def on_user_function(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_user_function' not implemented!")
        event.Skip()

    def on_reset_all(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_reset_all' not implemented!")
        event.Skip()

    def on_svd_manual(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_svd_manual' not implemented!")
        event.Skip()

    def on_svd_cursor_span_picks_lines(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_svd_cursor_span_picks_lines' not implemented!")
        event.Skip()

    def on_svd_apply_threshold(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_svd_apply_threshold' not implemented!")
        event.Skip()

    def on_svd_threshold(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_svd_threshold' not implemented!")
        event.Skip()

    def on_svd_threshold_unit(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_svd_threshold_unit' not implemented!")
        event.Skip()

    def on_svd_exclude_lipid(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_svd_exclude_lipid' not implemented!")
        event.Skip()

    def on_svd_exclude_lipid_start(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_svd_exclude_lipid_start' not implemented!")
        event.Skip()

    def on_svd_exclude_lipid_end(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_svd_exclude_lipid_end' not implemented!")
        event.Skip()

    def on_all_on(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_all_on' not implemented!")
        event.Skip()

    def on_all_off(self, event):  # wxGlade: PanelSpectralUI.<event_handler>
        print("Event handler 'on_all_off' not implemented!")
        event.Skip()

# end of class PanelSpectralUI

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetTitle("frame_1")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.PanelSpectralUI = PanelSpectralUI(self, wx.ID_ANY)
        sizer_1.Add(self.PanelSpectralUI, 1, wx.EXPAND, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()
        # end wxGlade

# end of class MyFrame
